#!/usr/bin/env python3
# Copyright European Organization for Nuclear Research (CERN) since 2012
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

'''
Probe to check dids, requests and replicas by daily.
'''

import datetime
import sys
import time

from rucio.db.sqla.session import get_session

from utils import probe_metrics

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3


if __name__ == "__main__":

    scope = "stresstest"

    try:
        session = get_session()
        utctime = datetime.datetime.utcnow()
        utctimeInt = int(time.mktime(utctime.timetuple()))
        timeStart = utctimeInt - 3600 * 24
        timeEnd = timeStart + 3600 * 24
        timezoneoffset = int((datetime.datetime.now() - datetime.datetime.utcnow()).seconds)

        # created datasets daily
        sql = "select  /*+ index_ffs(dids DIDS_PK) */  count(1) from atlas_rucio.dids where scope='tests' and did_type='D' \
               and account='ddmusr01' and project='step14' and created_at>= to_timestamp('" + str(datetime.datetime.fromtimestamp(timeStart)) + "','YYYY-MM-dd HH24:MI:SS') \
               and created_at <to_timestamp('" + str(datetime.datetime.fromtimestamp(timeEnd)) + "','YYYY-MM-dd HH24:MI:SS')"
        result = session.execute(sql).fetchone()[0]
        probe_metrics.gauge(f'{scope}.daily.created_datasets').set(result)
        print('daily.created_datasets', result)

        # created files daily
        sql = "select  /*+ index_ffs(dids DIDS_PK) */  count(1) from atlas_rucio.dids where scope='tests' and did_type='F' \
              and account='ddmusr01' and created_at>= to_timestamp('" + str(datetime.datetime.fromtimestamp(timeStart)) + "','YYYY-MM-dd HH24:MI:SS') \
              and created_at <to_timestamp('" + str(datetime.datetime.fromtimestamp(timeEnd)) + "','YYYY-MM-dd HH24:MI:SS')"
        result = session.execute(sql).fetchone()[0]
        probe_metrics.gauge(f'{scope}.daily.created_files').set(result)
        print('daily.created_files', result)

        # created replicas daily
        sql = """SELECT
            CASE
                WHEN state = 'A' THEN 'replicas_available'
                WHEN state = 'U' THEN 'replicas_unavailable'
                WHEN state = 'C' THEN 'replicas_copying'
                WHEN state = 'B' THEN 'replicas_being_deleted'
                WHEN state = 'D' THEN 'replicas_bad'
                WHEN state = 'S' THEN 'replicas_source'
            ELSE state
        """
        sql += "END state_desc, num_rows FROM (select /*+ index_ffs((replicas REPLICAS_PK) */ state, count(*) num_rows FROM atlas_rucio.replicas \
                WHERE scope = 'tests' and created_at>= to_timestamp('" + str(datetime.datetime.fromtimestamp(timeStart)) + "','YYYY-MM-dd HH24:MI:SS') \
                and created_at <to_timestamp('" + str(datetime.datetime.fromtimestamp(timeEnd)) + "','YYYY-MM-dd HH24:MI:SS') \
                and rse_id != (select id from atlas_rucio.rses where rse = 'CERN-PROD-RUCIOTEST_DATADISK') GROUP BY state)"
        result = session.execute(sql).fetchall()
        for r in result:
            print(f'daily.created_{r[0]}', r[1])
            probe_metrics.gauge(f'{scope}.daily.created_{r[0]}').set(r[1])

        # finished replicas daily
        sql = "select  /*+ index_ffs(replicas REPLICAS_PK) */  count(1) from atlas_rucio.replicas where scope='tests' and state='A' \
               and updated_at>= to_timestamp('" + str(datetime.datetime.fromtimestamp(timeStart)) + "','YYYY-MM-dd HH24:MI:SS') \
               and updated_at <to_timestamp('" + str(datetime.datetime.fromtimestamp(timeEnd)) + "','YYYY-MM-dd HH24:MI:SS') \
               and rse_id != (select id from atlas_rucio.rses where rse = 'CERN-PROD-RUCIOTEST_DATADISK')"
        result = session.execute(sql).fetchone()[0]
        print('daily.finished_replicas', result)
        probe_metrics.gauge(f'{scope}.daily.finished_replicas').set(result)

        # Total datasets daily
        sql = "select  /*+ index_ffs(dids DIDS_PK) */  count(1) from atlas_rucio.dids where scope='tests' and did_type='D' and account='ddmusr01' and project='step14'"
        result = session.execute(sql).fetchone()[0]
        probe_metrics.gauge(f'{scope}.daily.total_created_datasets').set(result)
        print('daily.total_created_datasets', result)

        # Total files daily
        sql = "select  /*+ index_ffs(dids DIDS_PK) */  count(1) from atlas_rucio.dids where scope='tests' and did_type='F' and account='ddmusr01'"
        result = session.execute(sql).fetchone()[0]
        probe_metrics.gauge(f'{scope}.daily.total_created_files').set(result)
        print('daily.total_created_files', result)

        # Total replicas daily
        sql = """SELECT
            CASE
                WHEN state = 'A' THEN 'replicas_available'
                WHEN state = 'U' THEN 'replicas_unavailable'
                WHEN state = 'C' THEN 'replicas_copying'
                WHEN state = 'B' THEN 'replicas_being_deleted'
                WHEN state = 'D' THEN 'replicas_bad'
                WHEN state = 'S' THEN 'replicas_source'
            ELSE state
        """
        sql += "END state_desc, num_rows FROM (select /*+ index_ffs((replicas REPLICAS_PK) */ state, count(*) num_rows FROM atlas_rucio.replicas \
                WHERE scope = 'tests' and rse_id != (select id from atlas_rucio.rses where rse = 'CERN-PROD-RUCIOTEST_DATADISK') group by state)"
        result = session.execute(sql).fetchall()
        for r in result:
            print(f'daily.total_{r[0]}', r[1])
            probe_metrics.gauge(f'{scope}.daily.total_{r[0]}').set(r[1])

        # Total requests daily
        sql = """SELECT
            CASE
                WHEN state = 'Q' THEN 'requests_queued'
                WHEN state = 'S' THEN 'requests_submitted'
                WHEN state = 'F' THEN 'requests_failed'
                WHEN state = 'D' THEN 'requests_done'
                WHEN state = 'L' THEN 'requests_lost'
            ELSE state
            END state_desc, num_rows FROM (select /*+ index_ffs(REQUESTS REQUESTS_TYP_STA_CRE_IDX) */ state, count(*) num_rows
            FROM atlas_rucio.requests WHERE request_type='T' and scope = 'tests' GROUP BY state)
        """
        result = session.execute(sql).fetchall()
        for r in result:
            print(f'daily.total_{r[0]}', r[1])
            probe_metrics.gauge(f'{scope}.daily.total{r[0]}').set(r[1])

    except:
        sys.exit(UNKNOWN)
    finally:
        session.remove()
    sys.exit(OK)
