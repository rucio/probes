#!/usr/bin/env python3
# Copyright 2012-2019 CERN for the benefit of the ATLAS collaboration.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors:
# - Mario Lassnig, <mario.lassnig@cern.ch>, 2012-2019
# - Dimitrios Christidis, <dimitrios.christidis@cern.ch>, 2020

import json
import sys
import traceback
from urllib.parse import urlparse

import requests

from rucio.db.sqla.session import get_session
from rucio.common.config import config_get
from rucio.common.exception import RucioException

from rucio.core.config import set as core_set
from rucio.core.config import items as core_items
from rucio.core.config import remove_option as core_del


UNKNOWN = 3
CRITICAL = 2
WARNING = 1
OK = 0

RESULT = OK

if __name__ == '__main__':

    try:
        PROXY = config_get('nagios', 'proxy')
    except Exception as error:
        print(error)
        print("Failed to get proxy from rucio.cfg")
        sys.exit(CRITICAL)

    try:

        session = get_session()

        xcaches_in_rucio = {}
        res = core_items('root-proxy-internal', session=session)
        for site, host in res:
            xcaches_in_rucio[site] = host

        SE_URL = 'https://atlas-cric.cern.ch/api/core/service/query/?json&type=SE'
        try:
            SE_RESP = requests.get(SE_URL, verify='/etc/pki/tls/certs/ca-bundle.crt', cert=PROXY)
            SE_DATA = json.loads(SE_RESP.content)
        except Exception as error:
            print("Failed to load SE info from CRIC: %s" % str(error))
            sys.exit(WARNING)

        xcaches_in_cric = []

        for se in SE_DATA:

            for protocol in SE_DATA[se]['protocols']:

                # find all active internal proxies (==xcaches_in_cric)
                if SE_DATA[se]['protocols'][protocol]['doortype'] == 'proxyinternal' and\
                   SE_DATA[se]['protocols'][protocol]['state'] == 'ACTIVE':
                    xcaches_in_cric.append((SE_DATA[se]['rcsite'], SE_DATA[se]['protocols'][protocol]['endpoint']))

        print('Setting values in Rucio from CRIC:')
        for xcache in xcaches_in_cric:
            url = '%s:%s' % (urlparse(xcache[1]).hostname, urlparse(xcache[1]).port)
            print('-SET->', xcache[0], '--->', url)
            core_set('root-proxy-internal', xcache[0], url, session=session)
            if xcache[0] in xcaches_in_rucio.keys():
                del xcaches_in_rucio[xcache[0]]

        print('Removing Rucio entries which were not found in CRIC:')
        for xcache in xcaches_in_rucio:
            print('-DEL->', xcache)
            core_del('root-proxy-internal', xcache, session=session)

    except RucioException as error:
        print(error)
        sys.exit(CRITICAL)
    except Exception:
        print(traceback.format_exc())
        RESULT = WARNING
    finally:
        session.commit()

    sys.exit(RESULT)
