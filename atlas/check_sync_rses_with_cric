#!/usr/bin/env python3
# Copyright European Organization for Nuclear Research (CERN) since 2012
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import json
import os.path
import sys
import traceback
from urllib.parse import urlparse

import requests

from rucio.api.account import list_accounts
from rucio.api.account_limit import set_local_account_limit
from rucio.api.rse import get_rse_protocols, add_protocol, add_rse, update_protocols
from rucio.common.config import config_get
from rucio.common.exception import Duplicate, RSEProtocolPriorityError, RSEProtocolNotSupported, RSENotFound
from rucio.db.sqla.constants import RSEType


UNKNOWN = 3
CRITICAL = 2
WARNING = 1
OK = 0

if __name__ == '__main__':
    try:
        PROXY = config_get('nagios', 'proxy')
    except Exception as error:
        print(error)
        print("Failed to get proxy from rucio.cfg")
        sys.exit(CRITICAL)

    URL = 'https://atlas-cric.cern.ch/api/atlas/ddmendpoint/query/?json'
    RESP = requests.get(url=URL, verify='/etc/pki/tls/certs/ca-bundle.crt', cert=PROXY)
    DATA = json.loads(RESP.content)
    RETVALUE = OK

    ADMIN_ACCOUNTS = [a['account'] for a in list_accounts(filter_={'admin': True})]
    for rse in sorted(DATA.values(), key=lambda x: x['name']):
        print(rse['name'])
        deterministic = False
        try:
            deterministic = rse['is_deterministic']
            volatile = False
            rse_type = RSEType.TAPE if rse['is_tape'] else RSEType.DISK
            add_rse(rse=rse['name'], issuer='root', deterministic=deterministic,
                    volatile=volatile, rse_type=rse_type)
            # Set infinite quotas for admin accounts
            for account in ADMIN_ACCOUNTS:
                set_local_account_limit(account, rse['name'], -1, issuer='root')
        except Duplicate as error:
            pass
        except Exception:
            RETVALUE = CRITICAL
            errno, errstr = sys.exc_info()[:2]
            trcbck = traceback.format_exc()
            print(f'Interrupted processing with {errno} {errstr} {trcbck}.')

        prefix = rse['endpoint']
        space_token = rse['token']

        existing_protocols = []
        try:
            rucio_protocols = get_rse_protocols(rse['name'], issuer='root')
            for prot in rucio_protocols['protocols']:
                existing_protocols.append((prot['scheme'], prot['hostname'], prot['port']))

        except RSENotFound as error:
            print(error)
            continue
        if rse['type'] in ['OS_ES', 'OS_LOGS', 'OS_CACHE']:
            print('This is a Object store endpoint. Skipping the protocols')
            priority = {}
            for activity in rse['arprotocols']:
                index = 0
                if activity in ['read_lan', 'read_wan', 'write_lan', 'write_wan', 'delete_lan', 'delete_wan', 'third_party_copy']:
                    for protocol in rse['arprotocols'][activity]:
                        index += 1
                        path = protocol['path']
                        o = urlparse(protocol['endpoint'])
                        if (o.scheme, o.netloc, path) not in priority:
                            priority[(o.scheme, o.netloc, path)] = {'read_lan': 0, 'write_lan': 0, 'delete_lan': 0,
                                                                    'read_wan': 0, 'write_wan': 0, 'delete_wan': 0,
                                                                    'third_party_copy_read': 0, 'third_party_copy_write': 0}
                        if activity == 'third_party_copy':
                            priority[(o.scheme, o.netloc, path)]['third_party_copy_read'] = index
                            priority[(o.scheme, o.netloc, path)]['third_party_copy_write'] = index
                        else:
                            priority[(o.scheme, o.netloc, path)][activity] = index
            for prio in priority:
                scheme, host_with_port, prefix = prio
                if not prefix.endswith('/'):
                    prefix += '/'
                port = 443
                hostname = host_with_port
                if host_with_port.find(':') > -1:
                    hostname, port = host_with_port.split(':')
                impl = None
                if scheme == 's3':
                    impl = 'rucio.rse.protocols.s3boto.Default'
                elif scheme == 's3+rucio':
                    if rse['type'] == 'OS_ES':
                        impl = 'rucio.rse.protocols.ses3.Default'
                    else:
                        impl = 'rucio.rse.protocols.signeds3.Default'
                params = {'hostname': hostname,
                          'scheme': scheme,
                          'port': port,
                          'prefix': prefix,
                          'impl': impl,
                          'domains': {"lan": {"read": priority[prio]['read_lan'],
                                              "write": priority[prio]['write_lan'],
                                              "delete": priority[prio]['delete_lan']},
                                      "wan": {"read": priority[prio]['read_wan'],
                                              "write": priority[prio]['write_wan'],
                                              "delete": priority[prio]['delete_wan'],
                                              "third_party_copy_read": priority[prio]['third_party_copy_read'],
                                              "third_party_copy_write": priority[prio]['third_party_copy_write']}}}
                print(params)
                if impl:
                    try:
                        add_protocol(rse=rse['name'], issuer='root', data=params)
                    except Duplicate as error:
                        print(error)
                else:
                    print(f'No implementation defined for {scheme} on RSE {rse["name"]}')
                    RETVALUE = CRITICAL

        else:
            prot_read = []
            prot_write = []
            prot_delete = []
            priority = {}
            protocols = {}
            for activity in rse['aprotocols']:
                index = 0
                if activity in ['read_lan', 'read_wan', 'write_lan', 'write_wan', 'delete_lan', 'delete_wan', 'third_party_copy']:
                    for protocol, cric_prio, cric_prefix in rse['aprotocols'][activity]:
                        index += 1
                        o = urlparse(protocol)
                        if o.scheme not in ('https', 'http', 'srm', 'srm+https', 'gsiftp', 'root', 'davs', 'dav', 'storm', 'globus'):
                            continue
                        if (o.scheme, o.netloc) not in priority:
                            priority[(o.scheme, o.netloc)] = {'read_lan': 0, 'write_lan': 0, 'delete_lan': 0,
                                                              'read_wan': 0, 'write_wan': 0, 'delete_wan': 0,
                                                              'third_party_copy_read': 0, 'third_party_copy_write': 0}
                        if activity == 'third_party_copy':
                            priority[(o.scheme, o.netloc)]['third_party_copy_read'] = index
                            priority[(o.scheme, o.netloc)]['third_party_copy_write'] = index
                        else:
                            priority[(o.scheme, o.netloc)][activity] = index

                        # Build the protocols structure that was dropped in the AGIS to CRIC migration
                        if protocol not in protocols:
                            protocols[protocol] = []
                        protocols[protocol].append([activity, cric_prio, cric_prefix])
            if sum([act['read_lan'] for act in priority.values()]) == 0:
                for key in priority:
                    priority[key]['read_lan'] = priority[key]['read_wan']
            if sum([act['write_lan'] for act in priority.values()]) == 0:
                for key in priority:
                    priority[key]['write_lan'] = priority[key]['write_wan']
            if sum([act['delete_lan'] for act in priority.values()]) == 0:
                for key in priority:
                    priority[key]['delete_lan'] = priority[key]['delete_wan']

            for protocol in protocols:
                try:
                    o = urlparse(protocol)
                    if o.scheme not in ('https', 'http', 'srm', 'srm+https', 'gsiftp', 'root', 'davs', 'dav', 'storm', 'globus'):
                        continue

                    extended_attributes = None
                    if o.scheme in ('srm', 'srm+https'):
                        extended_attributes = {"web_service_path": o.path + '?SFN=', "space_token": space_token}
                        impl = 'rucio.rse.protocols.gfal.Default'
                    elif o.scheme in ('davs', 'dav'):
                        extended_attributes = None
                        if rse['is_mkdir'] is True:
                            impl = 'rucio.rse.protocols.gfal.NoRename'
                        else:
                            impl = 'rucio.rse.protocols.gfal.Default'

                    elif o.scheme in ('https', 'http'):
                        extended_attributes = None
                        impl = 'rucio.rse.protocols.gfal.NoRename'
                    elif o.scheme == 'gsiftp':
                        extended_attributes = None
                        impl = 'rucio.rse.protocols.gfal.Default'
                    elif o.scheme == 'root':
                        extended_attributes = None
                        impl = 'rucio.rse.protocols.gfal.Default'
                    elif o.scheme == 'storm':
                        extended_attributes = None
                        impl = 'rucio.rse.protocols.storm.Default'
                    elif o.scheme == 'globus':
                        extended_attributes = None
                        impl = 'rucio.rse.protocols.globus.GlobusRSEProtocol'
                    else:
                        continue

                    port = 8443
                    netloc = o.netloc
                    if o.port and str(o.port) in o.netloc:
                        netloc = o.netloc[:-len(':' + str(o.port))]
                        port = o.port
                    else:
                        if o.scheme in ('https', 'davs'):
                            port = 443
                        elif o.scheme == 'gsiftp':
                            port = 2811
                        elif o.scheme in ('root', 'storm'):
                            port = 1094
                        elif o.scheme in ('globus'):
                            port = 0

                    # For disk end-points not for tape
                    prefix = protocols[protocol][0][2]
                    if not rse['is_tape'] and deterministic and not prefix.endswith('/rucio') and not prefix.endswith('/rucio/'):
                        prefix = os.path.join(prefix, 'rucio/')

                    params = {'hostname': netloc,
                              'scheme': o.scheme,
                              'port': port,
                              'prefix': prefix,
                              'impl': impl,
                              'extended_attributes': extended_attributes,
                              'domains': {"lan": {"read": priority[(o.scheme, o.netloc)]['read_lan'],
                                                  "write": priority[(o.scheme, o.netloc)]['write_lan'],
                                                  "delete": priority[(o.scheme, o.netloc)]['delete_lan']},
                                          "wan": {"read": priority[(o.scheme, o.netloc)]['read_wan'],
                                                  "write": priority[(o.scheme, o.netloc)]['write_wan'],
                                                  "delete": priority[(o.scheme, o.netloc)]['delete_wan'],
                                                  "third_party_copy_read": priority[(o.scheme, o.netloc)]['third_party_copy_read'],
                                                  "third_party_copy_write": priority[(o.scheme, o.netloc)]['third_party_copy_write']}}}

                    rucio_protocol = None
                    for prot in rucio_protocols['protocols']:
                        if prot['scheme'] == o.scheme and prot['hostname'] == netloc and prot['port'] == port:
                            rucio_protocol = prot
                            try:
                                existing_protocols.remove((o.scheme, netloc, port))
                            except ValueError:
                                pass
                            break
                    if params != rucio_protocol:
                        if rucio_protocol:
                            try:
                                for domain in ['lan', 'wan']:
                                    for act in ['read', 'write', 'delete']:
                                        if rucio_protocol['domains'][domain][act] != priority[(o.scheme, o.netloc)][f'{act}_{domain}']:
                                            print('{} : Protocol {} Activity {}_{} : priority in Rucio {} != priority in CRIC {}'.format(rse['name'],
                                                                                                                                         o.scheme,
                                                                                                                                         act,
                                                                                                                                         domain,
                                                                                                                                         rucio_protocol['domains'][domain][act],
                                                                                                                                         priority[(o.scheme, o.netloc)][f'{act}_{domain}']))
                                            update_protocols(rse['name'], o.scheme, {'domains': {domain: {act: priority[(o.scheme, o.netloc)][f'{act}_{domain}']}}}, issuer='root', hostname=netloc, port=port)
                                if rucio_protocol['domains']['wan']['third_party_copy_read'] != priority[(o.scheme, o.netloc)]['third_party_copy_read']:
                                    print('{} : Protocol {} Activity {} : priority in Rucio {} != priority in CRIC {}'.format(rse['name'],
                                                                                                                              o.scheme,
                                                                                                                              'third_party_copy_read',
                                                                                                                              rucio_protocol['domains']['wan']['third_party_copy_read'],
                                                                                                                              priority[(o.scheme, o.netloc)]['third_party_copy_read']))
                                    update_protocols(rse=rse['name'],
                                                     scheme=o.scheme,
                                                     data={'domains': {'wan': {'third_party_copy_read': priority[(o.scheme, o.netloc)]['third_party_copy_read']}}},
                                                     issuer='root',
                                                     hostname=netloc,
                                                     port=port)
                                if rucio_protocol['domains']['wan']['third_party_copy_write'] != priority[(o.scheme, o.netloc)]['third_party_copy_write']:
                                    print('{} : Protocol {} Activity {} : priority in Rucio {} != priority in CRIC {}'.format(rse['name'],
                                                                                                                              o.scheme,
                                                                                                                              'third_party_copy_write',
                                                                                                                              rucio_protocol['domains']['wan']['third_party_copy_write'],
                                                                                                                              priority[(o.scheme, o.netloc)]['third_party_copy_write']))
                                    update_protocols(rse=rse['name'],
                                                     scheme=o.scheme,
                                                     data={'domains': {'wan': {'third_party_copy_write': priority[(o.scheme, o.netloc)]['third_party_copy_write']}}},
                                                     issuer='root',
                                                     hostname=netloc,
                                                     port=port)

                            except RSEProtocolNotSupported as error:
                                print(error)
                        else:
                            print(f'Will create protocol {o.scheme} at {rse["name"]} with priorities read_lan,write_lan,delete_lan,read_wan,write_wan,delete_wan,third_party_copy_read,third_party_copy_write :',
                                  ','.join(str(x) for x in [params['domains']['lan']['read'], params['domains']['lan']['write'], params['domains']['lan']['delete'],
                                                            params['domains']['wan']['read'], params['domains']['wan']['write'], params['domains']['wan']['delete'],
                                                            params['domains']['wan']['third_party_copy_read'], params['domains']['wan']['third_party_copy_read']]))
                            try:
                                add_protocol(rse=rse['name'], issuer='root', data=params)
                            except Exception as error:
                                print(error)
                except Duplicate as error:
                    pass
                except RSEProtocolPriorityError as error:
                    print(f'RSE {rse["name"]} protocol {o.scheme}: {error}')
                    if RETVALUE != CRITICAL:
                        RETVALUE = WARNING
                except Exception:
                    RETVALUE = CRITICAL
                    errno, errstr = sys.exc_info()[:2]
                    trcbck = traceback.format_exc()
                    print(f'RSE {rse["name"]} protocol {o.scheme} : Interrupted processing with {errno} {errstr} {trcbck}.')
            if existing_protocols:
                RETVALUE = WARNING
                for scheme, hostname, port in existing_protocols:
                    print(f'WARNING : Protocol {scheme}://{hostname}:{port} is defined in Rucio but not in CRIC on RSE {rse["name"]} !!!!')
    sys.exit(RETVALUE)
