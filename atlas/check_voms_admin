#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#                       http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - David Cameron, <david.cameron@cern.ch>, 2015
# - Cedric Serfon, <cedric.serfon@cern.ch>, 2016
#
# Get country groups from VOMS, get DNs with production role,
# map to Rucio account and set country-<country>: admin
# Get all DNs in country and set country-<country>: user
# Get all DNs in phys/perf group with production role and set group-<group>: admin
# Get all names in cloud support e-group and set cloud-<cloud>: admin

import os
import re
import sys

import ldap  # pylint: disable=import-error

import requests
import requests.auth

from rucio.client import Client
from rucio.common.config import config_get
from rucio.common.exception import RucioException, Duplicate, AccountNotFound

UNKNOWN = 3
CRITICAL = 2
WARNING = 1
OK = 0

result = OK

LDAP_HOSTS = ['ldaps://xldap.cern.ch']
LDAP_OPTIONS = [
    # default configuration comes from /etc/openldap/ldap.conf
    # (ldap.OPT_X_TLS_CACERTDIR, '/etc/pki/tls/certs'),
    # (ldap.OPT_X_TLS_CACERTFILE, '/etc/pki/tls/certs/ca-bundle.crt'),
    # (ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER),
    (ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_DEMAND),
    (ldap.OPT_REFERRALS, 0),
]


def get_access_token(token_url, client_id, client_secret):
    data = {
        'grant_type': 'client_credentials'
    }
    basic_auth = requests.auth.HTTPBasicAuth(client_id, client_secret)
    response = requests.post(token_url, data=data, auth=basic_auth)

    if response.status_code != 200:
        print("Failed to get access token")
        sys.exit(CRITICAL)

    token_info = response.json()
    return token_info['access_token']


def get_userid2certs_mapping(scim_url, access_token):
    ret = {}

    with requests.Session() as session:
        session.headers = {
            'Authorization': "Bearer {}".format(access_token),
        }

        start = 1
        page_size = 100
        while True:
            response = session.get("{}/Users".format(scim_url), params={'startIndex': start, 'count': page_size})
            if response.status_code != 200:
                print("Failed to get users (offset={})".format(start))
                sys.exit(CRITICAL)
            d = response.json()
            if d['itemsPerPage'] == 0: break
            for user in d['Resources']:
                for certificate in user.get('urn:indigo-dc:scim:schemas:IndigoUser', {}).get('certificates', []):
                    #ret.setdefault(user['id'], []).append((certificate['subjectDn'], certificate['issuerDn'], user['emails'][0]['value']))
                    ret.setdefault(user['id'], []).append(certificate['subjectDn'])
            start += page_size

    return ret


def get_groups(scim_url, access_token):
    ret = {}

    with requests.Session() as session:
        session.headers = {
            'Authorization': "Bearer {}".format(access_token),
        }

        start = 1
        page_size = 100
        while True:
            response = session.get("{}/Groups".format(scim_url), params={'startIndex': start, 'count': page_size})
            if response.status_code != 200:
                print("Failed to get groups (offset={})".format(start))
                sys.exit(CRITICAL)
            d = response.json()
            if d['itemsPerPage'] == 0: break
            for group in d['Resources']:
                ret[group['displayName']] = group['id']
            start += page_size

    return ret


def get_groupid_members(scim_url, groupid, access_token):
    ret = []

    with requests.Session() as session:
        session.headers = {
            'Authorization': "Bearer {}".format(access_token),
        }

        start = 1
        page_size = 100
        while True:
            response = session.get("{}/Groups/{}/members".format(scim_url, groupid), params={'startIndex': start, 'count': page_size})
            if response.status_code != 200:
                print("Failed to get group members (groupid={}, offset={})".format(groupid, start))
                sys.exit(CRITICAL)
            response.raise_for_status()
            d = response.json()
            if d['itemsPerPage'] == 0: break
            for member in d['Resources']:
                ret.append((member['value'], member['display']))
            start += page_size

    return ret


if __name__ == '__main__':
    TEST = True if 'TEST' in os.environ and os.environ['TEST'].lower() in ['1', 'y', 'yes', 'true'] else False
    SKIP_REMOVE = True if 'SKIP_REMOVE' in os.environ and os.environ['SKIP_REMOVE'].lower() in ['1', 'y', 'yes', 'true'] else False
    result = OK
    try:
        PROXY = config_get('nagios', 'proxy')
        os.environ["X509_USER_PROXY"] = PROXY
        CERT, KEY = os.environ['X509_USER_PROXY'], os.environ['X509_USER_PROXY']
    except Exception as error:
        print("Failed to get proxy from rucio.cfg")
        try:
            CERT = config_get('client', 'client_cert')
            KEY = config_get('client', 'client_key')
        except Exception as error:
            print("Failed to get also client certificate and key from rucio.cfg")
            sys.exit(CRITICAL)
    TOKEN_URL = 'https://atlas-auth.cern.ch/token'
    SCIM_URL = 'https://atlas-auth.cern.ch/scim'
    try:
        CLIENT_ID = os.environ['CLIENT_ID']
        CLIENT_SECRET = os.environ['CLIENT_SECRET']
    except Exception:
        print("Failed to get token client from environment")
        sys.exit(CRITICAL)

    client = Client()

    # get rucio accounts, identities and attributes
    account2attrs = {}
    dn2useraccount = {}
    for account in client.list_accounts():
        attrs = [x for x in client.list_account_attributes(account['account'])]
        if len(attrs) > 0:
            if len(attrs) > 1:
                print("unexpected attribute list for account {}: {}".format(account['account'], attrs))
            account2attrs[account['account']] = dict([(x['key'], x['value']) for x in attrs[0]])
        else:
            account2attrs[account['account']] = {}
        if account['type'] != 'USER': continue
        for identity in client.list_identities(account['account']):
            if identity['type'] != 'X509': continue
            dn2useraccount[identity['identity']] = account['account']

    access_token = get_access_token(TOKEN_URL, CLIENT_ID, CLIENT_SECRET)
    userid2certs = get_userid2certs_mapping(SCIM_URL, access_token)

    userid2accounts = {}
    for userid, certs in userid2certs.items():
        accounts = set()
        for cert in certs:
            if cert in dn2useraccount:
                accounts.add(dn2useraccount[cert])
        if len(accounts) == 0:
            print("no rucio account for {} (certificates: '{}')".format(userid, "', '".join(certs)))
        if len(accounts) > 1:
            print("multiple rucio accounts for {}: {}".format(userid, ", ".join(sorted(accounts))))
        userid2accounts[userid] = sorted(accounts)

    # find IAM country and group administrators (production role) and users
    account2attributes = {}
    access_token = get_access_token(TOKEN_URL, CLIENT_ID, CLIENT_SECRET)
    for group, groupid in get_groups(SCIM_URL, access_token).items():
        attributes = {}

        match_pattern = re.match('atlas/(\w\w|cern|usatlas)(|/(production|Group-Manager))$', group)
        if match_pattern:
            country = match_pattern.group(1)
            if country == 'usatlas':
                country = 'us'
            role = match_pattern.group(2).lstrip('/')
            if role in ['production', 'Group-Manager']:
                attributes["country-{}".format(country)] = 'admin'
            else:
                attributes["country-{}".format(country)] = 'user'

        match_pattern = re.match('atlas/(.*-.*)/(production|Group-Manager)$', group)
        if match_pattern:
            phys_group = match_pattern.group(1)
            attributes["group-{}".format(phys_group)] = 'admin'

        access_token = get_access_token(TOKEN_URL, CLIENT_ID, CLIENT_SECRET)
        for userid, display in get_groupid_members(SCIM_URL, groupid, access_token):
            if userid not in userid2accounts:
                if userid not in userid2certs:
                    print("missing rucio account for {} (userid: {})".format(display, userid))
                else:
                    print("missing rucio account for {} (userid: {}, certificates: '{}')".format(display, userid, "', '".join(userid2certs[userid])))
                continue

            for account in userid2accounts[userid]:
                account2attributes.setdefault(account, {}).update(attributes)

    # cloud admins from ldap egroups
    for cloud in ['ca', 'de', 'es', 'fr', 'it', 'ng', 'nl', 'ru', 't0', 'tw', 'uk', 'us']:
        egroup = "atlas-support-cloud-{}".format(cloud)
        if cloud == 'ru':
            egroup = 'atlas-adc-cloud-ru'

        cloud = cloud.replace('t0', 'cern')
        cloud = cloud.replace('ng', 'nd')

        for opt_key, opt_val in LDAP_OPTIONS:
            ldap.set_option(opt_key, opt_val)

        try:
            ldap_conn = ldap.initialize(",".join(LDAP_HOSTS))
            ldap_conn.simple_bind_s()
            result_id = ldap_conn.search_ext(
                "CN={},OU=e-groups,OU=Workgroups,DC=cern,DC=ch".format(egroup),
                ldap.SCOPE_SUBTREE,
                '(objectClass=group)',
                attrlist=['member']
            )
            result_type, result_data = ldap_conn.result(result_id, timeout=-1)
            for dn, attrs in result_data:
                for member in [x.decode('utf-8') for x in attrs.get('member', [])]:
                    if not member.endswith('OU=Users,OU=Organic Units,DC=cern,DC=ch'):
                        continue
                    account = member.split(',')[0][len('CN='):]
                    account2attributes.setdefault(account, {}).update({'cloud-{}'.format(cloud): 'admin'})
        except ldap.LDAPError as e:
            print("LDAP error: {}".format(e))
            result = WARNING
        finally:
            ldap_conn.unbind_s()

    # update rucio account attributes
    for account, attributes in sorted(account2attributes.items()):
        if account not in account2attrs: continue
        rucio_attributes = account2attrs.get(account, {})
        #print("rucio account {} attributes {} -> {}".format(account, rucio_attributes, attributes))
        try:
            for key, value in attributes.items():
                if key.startswith('country-') or key.startswith('group-') or key.startswith('cloud-'):
                    if key not in rucio_attributes:
                        if not TEST:
                            client.add_account_attribute(account=account, key=key, value=value)
                        else:
                            print("CMD: rucio-admin account add-attribute --key '{}' --value '{}' {}".format(key, value, account))
                    elif value != rucio_attributes[key]:
                        if not TEST:
                            client.delete_account_attribute(account=account, key=key)
                            client.add_account_attribute(account=account, key=key, value=value)
                        else:
                            print("CMD: rucio-admin account delete-attribute --key '{}' {}".format(key, account))
                            print("CMD: rucio-admin account add-attribute --key '{}' --value '{}' {}".format(key, value, account))
            if not SKIP_REMOVE:
                for key, value in rucio_attributes.items():
                    if key.startswith('country-') or key.startswith('group-') or key.startswith('cloud-'):
                        if key not in attributes:
                            if not TEST:
                                client.delete_account_attribute(account=account, key=key)
                            else:
                                print("CMD: rucio-admin account delete-attribute --key '{}' {}".format(key, account))
        except Duplicate:
            pass
        except AccountNotFound:
            print('Warning: Account %s not in Rucio' % account)
            result = WARNING
        except RucioException as error:
            print("Failed to add account attribute: %s" % str(error))
            result = WARNING
        except Exception as error:
            print("failed to update account {} ({} -> {}): {}".format(account, rucio_attributes, attributes, str(error)))
            result = WARNING

    sys.exit(result)
