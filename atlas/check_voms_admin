#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#                       http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - David Cameron, <david.cameron@cern.ch>, 2015
# - Cedric Serfon, <cedric.serfon@cern.ch>, 2016
#
# Get country groups from VOMS, get DNs with production role,
# map to Rucio account and set country-<country>: admin
# Get all DNs in country and set country-<country>: user
# Get all DNs in phys/perf group with production role and set group-<group>: admin
# Get all names in cloud support e-group and set cloud-<cloud>: admin

import os
import re
import sys

import ldap  # pylint: disable=import-error

import requests
import requests.auth

from rucio.api.account import list_accounts, add_account_attribute, del_account_attribute, list_account_attributes
from rucio.common.config import config_get
from rucio.common.exception import RucioException, Duplicate, AccountNotFound

UNKNOWN = 3
CRITICAL = 2
WARNING = 1
OK = 0

result = OK

LDAP_HOSTS = ['ldaps://xldap.cern.ch']
LDAP_OPTIONS = [
    # default configuration comes from /etc/openldap/ldap.conf
    # (ldap.OPT_X_TLS_CACERTDIR, '/etc/pki/tls/certs'),
    # (ldap.OPT_X_TLS_CACERTFILE, '/etc/pki/tls/certs/ca-bundle.crt'),
    # (ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER),
    (ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_DEMAND),
    (ldap.OPT_REFERRALS, 0),
]


def get_access_token(token_url, client_id, client_secret):
    data = {
        'grant_type': 'client_credentials'
    }
    basic_auth = requests.auth.HTTPBasicAuth(client_id, client_secret)
    response = requests.post(token_url, data=data, auth=basic_auth)

    if response.status_code != 200:
        print("Failed to get access token")
        sys.exit(CRITICAL)

    token_info = response.json()
    return token_info['access_token']


def get_userid2certs_mapping(scim_url, access_token):
    ret = {}

    with requests.Session() as session:
        session.headers = {
            'Authorization': "Bearer {}".format(access_token),
        }

        start = 1
        page_size = 100
        while True:
            response = session.get("{}/Users".format(scim_url), params={'startIndex': start, 'count': page_size})
            if response.status_code != 200:
                print("Failed to get users (offset={})".format(start))
                sys.exit(CRITICAL)
            d = response.json()
            if d['itemsPerPage'] == 0: break
            for user in d['Resources']:
                for certificate in user.get('urn:indigo-dc:scim:schemas:IndigoUser', {}).get('certificates', []):
                    ret.setdefault(user['id'], []).append((certificate['subjectDn'], certificate['issuerDn'], user['emails'][0]['value']))
            start += page_size

    return ret


def get_groups(scim_url, access_token):
    ret = {}

    with requests.Session() as session:
        session.headers = {
            'Authorization': "Bearer {}".format(access_token),
        }

        start = 1
        page_size = 100
        while True:
            response = session.get("{}/Groups".format(scim_url), params={'startIndex': start, 'count': page_size})
            if response.status_code != 200:
                print("Failed to get groups (offset={})".format(start))
                sys.exit(CRITICAL)
            d = response.json()
            if d['itemsPerPage'] == 0: break
            for group in d['Resources']:
                ret[group['displayName']] = group['id']
            start += page_size

    return ret


def get_groupid_members(scim_url, groupid, access_token):
    ret = []

    with requests.Session() as session:
        session.headers = {
            'Authorization': "Bearer {}".format(access_token),
        }

        start = 1
        page_size = 100
        while True:
            response = session.get("{}/Groups/{}/members".format(scim_url, groupid), params={'startIndex': start, 'count': page_size})
            if response.status_code != 200:
                print("Failed to get group members (groupid={}, offset={})".format(groupid, start))
                sys.exit(CRITICAL)
            response.raise_for_status()
            d = response.json()
            if d['itemsPerPage'] == 0: break
            for member in d['Resources']:
                ret.append(member['value'])
            start += page_size

    return ret


def set_account_attributes(dns):

    result = OK
    if not dns:
        print('No user')
        return result

    account_mapping = {}
    for dn in dns:
        # Get Rucio account
        accounts = list_accounts(filter={'identity': dn, 'account_type': 'USER'})
        if not accounts:
            print("Warning: no user accounts for %s" % dn)
            continue
        account_type, role = dns[dn].split(':')
        for acc in accounts:
            account = acc['account']
            if not (account, account_type) in account_mapping:
                account_mapping[(account, account_type)] = role
            elif account_mapping[(account, account_type)] != role and role == 'admin':
                print('Will promote account %s to admin role' % (account))
                account_mapping[(account, account_type)] = role
            else:
                pass
                # print 'Do nothing for %s:%s DN : %s' % (account, account_type, dn)
    for account, account_type in account_mapping:
        role = account_mapping[(account, account_type)]
        print('Set %s role for %s for %s' % (role, account_type, account))
        try:
            attrs = dict([(dummy['key'], dummy['value']) for dummy in list_account_attributes(account)])
            if account_type in attrs and attrs[account_type] == role:
                print('Account %s already has the role %s for %s' % (account, role, account_type))
                continue
            elif account_type in attrs:
                print('Removing attribute %s from account %s' % (account_type, account))
                del_account_attribute(account_type, account, 'root')
            print('Adding attribute %s for %s from account %s' % (role, account_type, account))
            add_account_attribute(account_type, role, account, 'root')
        except Duplicate:
            pass
        except RucioException as error:
            print("Failed to add account attribute: %s" % str(error))
            result = WARNING
    return result


def add_cloud_admins(test):

    result = OK
    for cloud in ['ca', 'de', 'es', 'fr', 'it', 'ng', 'nl', 'ru', 't0', 'tw', 'uk', 'us']:
        egroup = "atlas-support-cloud-{}".format(cloud)
        if cloud == 'ru':
            egroup = 'atlas-adc-cloud-ru'

        cloud = cloud.replace('t0', 'cern')
        cloud = cloud.replace('ng', 'nd')

        for opt_key, opt_val in LDAP_OPTIONS:
            ldap.set_option(opt_key, opt_val)

        try:
            ldap_conn = ldap.initialize(",".join(LDAP_HOSTS))
            ldap_conn.simple_bind_s()
            result_id = ldap_conn.search_ext(
                "CN={},OU=e-groups,OU=Workgroups,DC=cern,DC=ch".format(egroup),
                ldap.SCOPE_SUBTREE,
                '(objectClass=group)',
                attrlist=['member']
            )
            result_type, result_data = ldap_conn.result(result_id, timeout=-1)
            for dn, attrs in result_data:
                for member in [x.decode('utf-8') for x in attrs.get('member', [])]:
                    if not member.endswith('OU=Users,OU=Organic Units,DC=cern,DC=ch'):
                        continue
                    account = member.split(',')[0][len('CN='):]
                    print('Set admin role for cloud-%s for %s' % (cloud, account))
                    try:
                        if not test:
                            add_account_attribute('cloud-%s' % cloud, 'admin', account, 'root')
                    except Duplicate:
                        pass
                    except AccountNotFound:
                        print('Warning: Account %s not in Rucio' % account)
                        result = WARNING
                    except RucioException as error:
                        print("Failed to add account attribute: %s" % str(error))
                        result = WARNING
        except ldap.LDAPError as e:
            print("LDAP error: {}".format(e))
        finally:
            ldap_conn.unbind_s()

    return result


if __name__ == '__main__':
    result = OK
    try:
        PROXY = config_get('nagios', 'proxy')
        os.environ["X509_USER_PROXY"] = PROXY
        CERT, KEY = os.environ['X509_USER_PROXY'], os.environ['X509_USER_PROXY']
    except Exception as error:
        print("Failed to get proxy from rucio.cfg")
        sys.exit(CRITICAL)
    TOKEN_URL = 'https://atlas-auth.cern.ch/token'
    SCIM_URL = 'https://atlas-auth.cern.ch/scim'
    try:
        CLIENT_ID = os.environ['CLIENT_ID']
        CLIENT_SECRET = os.environ['CLIENT_SECRET']
    except Exception:
        print("Failed to get token client from environment")
        sys.exit(CRITICAL)
    TEST = False

    access_token = get_access_token(TOKEN_URL, CLIENT_ID, CLIENT_SECRET)
    userid2certs = get_userid2certs_mapping(SCIM_URL, access_token)

    access_token = get_access_token(TOKEN_URL, CLIENT_ID, CLIENT_SECRET)
    for group, groupid in get_groups(SCIM_URL, access_token).items():
        match_pattern = re.match('atlas/(\w\w|cern|usatlas)(|/(production|Group-Manager))$', group)
        if match_pattern:
            vomsgroup = match_pattern.group(0)
            country = match_pattern.group(1)
            if country == 'usatlas':
                country = 'us'
            role = match_pattern.group(2).lstrip('/')
            attribute = "country-{}:user".format(country) if role == '' else "country-{}:admin".format(country)

            dns = {}
            print("Working on {}".format(attribute))
            access_token = get_access_token(TOKEN_URL, CLIENT_ID, CLIENT_SECRET)
            for userid in get_groupid_members(SCIM_URL, groupid, access_token):
                if userid not in userid2certs:
                    print("missing user details for userid {}".format(userid))
                    continue
                for dn, ca, email in userid2certs[userid]:
                    dns[dn] = attribute

            if not TEST:
                set_account_attributes(dns)

        match_pattern = re.match('atlas/(.*-.*)/(production|Group-Manager)$', group)
        if match_pattern:
            vomsgroup = match_pattern.group(0)
            phys_group = match_pattern.group(1)
            attribute = "group-{}:admin".format(phys_group)
            dns = {}
            print("Working on {}".format(attribute))
            access_token = get_access_token(TOKEN_URL, CLIENT_ID, CLIENT_SECRET)
            for userid in get_groupid_members(SCIM_URL, groupid, access_token):
                if userid not in userid2certs:
                    print("missing user details for userid {}".format(userid))
                    continue
                for dn, ca, email in userid2certs[userid]:
                    dns[dn] = attribute
            if not TEST:
                set_account_attributes(dns)

    # Add cloud admins from ldap egroups
    add_cloud_admins(TEST)

    sys.exit(result)
