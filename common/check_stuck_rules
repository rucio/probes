#!/usr/bin/env python3
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Martin Barisits, <martin.barisits@cern.ch>, 2014
# - Eric Vaandering, <ewv@fnal.gov>, 2019-2022
# - Thomas Beermann, <thomas.beermann@cern.ch>, 2019

"""
Probe to check the backlog of stuck rules.
"""

import sys
import traceback

from prometheus_client import CollectorRegistry, Gauge
from rucio.core import monitor
from rucio.db.sqla.session import BASE, get_session

from utils import common

PrometheusPusher = common.PrometheusPusher

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if BASE.metadata.schema:
    schema = BASE.metadata.schema + '.'
else:
    schema = ''

if __name__ == "__main__":
    try:
        registry = CollectorRegistry()
        session = get_session()
        with PrometheusPusher(registry, job_name='check_stuck_rules') as prometheus_config:
            prefix: str = prometheus_config['prefix']

            sql = 'SELECT COUNT(1) FROM {schema}RULES where state=\'S\' and (error !=\'MissingSourceReplica\' or error IS NULL)'.format(schema=schema)
            result = session.execute(sql).fetchone()[0]
            monitor.record_gauge('judge.stuck_rules_without_missing_source_replica', value=result)
            Gauge(prefix + 'judge_stuck_rules_without_missing_source_replica', '', registry=registry).set(result)

            sql = 'SELECT COUNT(1) FROM {schema}RULES where state=\'S\' and error =\'MissingSourceReplica\''.format(schema=schema)
            result = session.execute(sql).fetchone()[0]
            monitor.record_gauge('judge.stuck_rules_with_missing_source_replica', value=result)
            Gauge(prefix + 'judge_stuck_rules_with_missing_source_replica', '', registry=registry).set(result)


    except:
        print(traceback.format_exc())
        sys.exit(UNKNOWN)
    sys.exit(OK)
