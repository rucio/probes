#!/usr/bin/env python3
# Copyright European Organization for Nuclear Research (CERN) since 2012
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Probe to check the backlog of stuck rules.
"""

import sys
import traceback
from sqlalchemy.sql import and_, func, null, or_, select

from rucio.db.sqla import models
from rucio.db.sqla.session import get_session

from utils.common import PrometheusPusher

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if __name__ == "__main__":
    try:
        session = get_session()
        without_missing_replica_statement = select(
            func.count()
        ).select_from(
            models.ReplicationRule
        ).where(
            and_(
                models.ReplicationRule.state == "S",
                or_(
                    models.ReplicationRule.error != "MissingSourceReplica",
                    models.ReplicationRule.error == null()
                )
            )
        )

        with_missing_replica_statement = select(
            func.count()
        ).select_from(
            models.ReplicationRule
        ).where(
            and_(
                models.ReplicationRule.state == "S",
                models.ReplicationRule.error == "MissingSourceReplica"
            )
        )
        queries = {
            "without_missing_source_replica": without_missing_replica_statement,
            "with_missing_source_replica": with_missing_replica_statement
        }

        with PrometheusPusher() as manager:
            for source_status, statement in queries.items():
                result = session.execute(statement).scalar_one()
                (manager.gauge(
                        "stuck_rules.{source_status}",
                        documentation="Backlog of stuck rules")
                    .labels(source_status=source_status)
                    .set(result))
    except Exception:
        print(traceback.format_exc())
        sys.exit(UNKNOWN)
    sys.exit(OK)
