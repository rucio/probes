#!/usr/bin/env python3
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Martin Barisits, <martin.barisits@cern.ch>, 2014
# - Eric Vaandering, <ewv@fnal.gov>, 2019-2022
# - Thomas Beermann, <thomas.beermann@cern.ch>, 2019
# - Maggie Voetberg, <maggiev@fnal.gov>, 2024

"""
Probe to check the backlog of stuck rules.
"""

import sys
import traceback
from sqlalchemy.sql import text as sql_text

from rucio.db.sqla.session import BASE, get_session
from utils.common import PrometheusPusher

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if BASE.metadata.schema:
    schema = BASE.metadata.schema + '.'
else:
    schema = ''

if __name__ == "__main__":
    try:
        session = get_session()

        without_missing = 'SELECT COUNT(1) FROM {schema}RULES where state=\'S\' and (error !=\'MissingSourceReplica\' or error IS NULL)'.format(schema=schema)
        with_missing =  'SELECT COUNT(1) FROM {schema}RULES where state=\'S\' and error =\'MissingSourceReplica\''.format(schema=schema)
        queries = {
            "without_missing_source_replica": without_missing, 
            "with_missing_source_replica": with_missing
        }

        with PrometheusPusher() as manager:
            for source_status, query in queries.items(): 
                result = session.execute(sql_text(query)).fetchone()[0]
                manager.gauge("stuck_rules.{source_status}", 
                    documentation="Backlog of stuck rules"
                    ).labels(source_status=source_status).set(result)

    except:
        print(traceback.format_exc())
        sys.exit(UNKNOWN)
        
    sys.exit(OK)
