#!/usr/bin/env python
# Copyright 2012-2019 CERN for the benefit of the ATLAS collaboration.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors:
# - Mario Lassnig, <mario.lassnig@cern.ch>, 2012-2019
#
# PY3K COMPATIBLE

from __future__ import print_function

import json
import sys
import traceback

import requests

try:
    # Python 2
    from urlparse import urlparse
except ImportError:
    # Python 3
    from urllib.parse import urlparse

from rucio.db.sqla.session import get_session
from rucio.common.exception import RucioException

from rucio.core.config import set as core_set
from rucio.core.config import items as core_items
from rucio.core.config import remove_option as core_del


UNKNOWN = 3
CRITICAL = 2
WARNING = 1
OK = 0

RESULT = OK

if __name__ == '__main__':

    try:

        session = get_session()

        xcaches_in_rucio = {}
        res = core_items('root-proxy-internal', session=session)
        for site, host in res:
            xcaches_in_rucio[site] = host

        URL = 'http://atlas-agis-api.cern.ch/request/ddmendpoint/query/list/?json&state=ACTIVE&site_state=ACTIVE'
        try:
            RESP = requests.get(url=URL)
            DATA = json.loads(RESP.content)
        except Exception as error:
            print("Failed to load info from AGIS: %s" % str(error))
            sys.exit(WARNING)

        SERVICE_SITE_MAPPING = {}
        for rse in DATA:
            site = rse['site']
            service = rse['resource']['service']
            SERVICE_SITE_MAPPING[service] = site

        INTERNAL_PROXY_MAPPING = {}
        URL = 'http://atlas-agis-api.cern.ch/request/serviceobject/query/list/?json&state=ACTIVE'
        try:
            RESP = requests.get(url=URL)
            DIC = json.loads(RESP.content)
            for rc_site in DIC:
                for service in DIC[rc_site]:
                    if service not in SERVICE_SITE_MAPPING:
                        continue
                    if 'protocols' not in DIC[rc_site][service]:
                        continue
                    for protocol in DIC[rc_site][service]['protocols']:
                        # find all active internal proxies (==xcaches_in_agis)
                        if SE_DATA[rc_site][service]['protocols'][protocol]['doortype'] == 'proxyinternal' and\
                           SE_DATA[rc_site][service]['protocols'][protocol]['state'] == 'ACTIVE':
                            site = SERVICE_SITE_MAPPING[service]
                            xcaches_in_agis.append((site, SE_DATA[rc_site][service]['protocols'][protocol]['endpoint']))
        except Exception as error:
            print("Failed to load info from AGIS: %s" % str(error))
            sys.exit(WARNING)

        print('Setting values in Rucio from AGIS:')
        for xcache in xcaches_in_agis:
            url = '%s:%s' % (urlparse(xcache[1]).hostname, urlparse(xcache[1]).port)
            print('-SET->', xcache[0], '--->', url)
            core_set('root-proxy-internal', xcache[0], url, session=session)
            if xcache[0] in xcaches_in_rucio.keys():
                del xcaches_in_rucio[xcache[0]]

        print('Removing Rucio entries which were not found in AGIS:')
        for xcache in xcaches_in_rucio:
            print('-DEL->', xcache)
            core_del('root-proxy-internal', xcache, session=session)

    except RucioException as error:
        print(error)
        sys.exit(CRITICAL)
    except Exception:
        print(traceback.format_exc())
        RESULT = WARNING
    finally:
        session.commit()

    sys.exit(RESULT)
