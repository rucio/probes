#!/usr/bin/env python3
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Vincent Garonne, <vincent.garonne@cern.ch>, 2015
# - Cedric Serfon, <cedric.serfon@cern.ch>, 2018
# - Maggie Voetberg, <maggiev@fnal.gov>, 2024

'''
Probe to check the backlog of obsolete replicas.
'''

import sys
import traceback
from sqlalchemy.sql import text
from rucio.db.sqla.session import BASE, get_session
from utils.common import PrometheusPusher

if BASE.metadata.schema:
    schema = BASE.metadata.schema + '.'
else:
    schema = ''

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3


if __name__ == "__main__":
    try:
        session = get_session()
        with PrometheusPusher() as manager:
            query = '''SELECT
                    a.rse_id AS rse_id,
                    NVL(b.files, 0) AS files,
                    NVL(b.bytes, 0) AS bytes,
                    SYS_EXTRACT_UTC(LOCALTIMESTAMP) AS updated_at
                FROM
                    (
                    SELECT
                        id AS rse_id
                    FROM
                        {schema}rses
                    WHERE
                        deleted = 0
                ) a
                LEFT OUTER JOIN(
                    SELECT /*+  INDEX_FFS(replicas REPLICAS_TOMBSTONE_IDX) */
                        rse_id,
                        COUNT(1) AS files,
                        SUM(bytes) AS bytes
                    FROM
                        {schema}replicas
                    WHERE
                        (
                            CASE WHEN tombstone IS NOT NULL THEN rse_id
                        END
                ) IS NOT NULL AND tombstone = to_date(
                    '1-1-1970 00:00:00',
                    'MM-DD-YYYY HH24:Mi:SS'
                )
                GROUP BY
                    rse_id
                ) b
                ON
                    a.rse_id = b.rse_id'''.format(schema=schema)
            
            for result in session.execute(text(query)):

                rse_id = result[0]
                bytes_sum = result[1]
                files_count = result[2]

                manager.gauge(name="obsolete_replicas_files.{rse}",
                              documentation="Probe to check the backlog of obsolete replicas.").labels(rse=rse_id).set(files_count)
                
                manager.gauge(name="obsolete_replicas_bytes.{rse}",
                                documentation="Probe to check the backlog of obsolete replicas.").labels(rse=rse_id).set(bytes_sum)


    except:
        print(traceback.format_exc())
        sys.exit(UNKNOWN)
    finally:
        session.remove()
    sys.exit(OK)
