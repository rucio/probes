#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) since 2012
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Probe to check requests.
"""

import datetime
import sys
import time

from rucio.db.sqla.session import BASE, get_session

from utils.common import probe_metrics

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if BASE.metadata.schema:
    schema = BASE.metadata.schema + '.'
else:
    schema = ''

if __name__ == "__main__":

    scope = "stresstest"

    try:
        session = get_session()
        utctime = datetime.datetime.utcnow()
        utctimeInt = int(time.mktime(utctime.timetuple()))
        timeEnd = utctimeInt
        timezoneoffset = int((datetime.datetime.now() - datetime.datetime.utcnow()).seconds)

        # check requests to different sites
        sql = "select /*+ index_ffs(REQUESTS REQUESTS_TYP_STA_CRE_IDX) */ {schema}id2rse(dest_rse_id) rse, state, count(*) \
               from {schema}requests where request_type='T'  group by dest_rse_id, state".format(schema=schema)
        result = session.execute(sql).fetchall()
        for rse, state, num in result:
            # print "requests.%s.%s %s" % (state, rse, num)
            (probe_metrics.gauge(name='{scope}.requests.{state}.{rse}')
                          .labels(scope=scope, state=state, rse=rse).set(num))

        # check left requests which are 12 hours old to different sites
        timeLimit = datetime.datetime.utcnow() - datetime.timedelta(hours=12)
        sql = "select /*+ index_ffs(REQUESTS REQUESTS_TYP_STA_CRE_IDX) */ {schema}id2rse(dest_rse_id) rse, state, count(*) \
              from {schema}requests where request_type='T' and created_at<=to_timestamp('".format(schema=schema) \
              + str(timeLimit) + "','YYYY-MM-dd HH24:MI:SS.FF') group by dest_rse_id, state".format(schema=schema)
        result = session.execute(sql).fetchall()
        for rse, state, num in result:
            # print 'requests.12Hours_old.%s.%s %s' % (state, rse, num)
            (probe_metrics.gauge(name='{scope}.requests.12Hours_old.{state}.{rse}')
                          .labels(scope=scope, state=state, rse=rse).set(num))

        # check left requests which are 24 hours old to different sites
        timeLimit = datetime.datetime.utcnow() - datetime.timedelta(hours=24)
        sql = "select /*+ index_ffs(REQUESTS REQUESTS_TYP_STA_CRE_IDX) */ {schema}id2rse(dest_rse_id) rse, state, count(*) \
              from {schema}requests where request_type='T' and created_at<=to_timestamp('".format(schema=schema) \
              + str(timeLimit) + "','YYYY-MM-dd HH24:MI:SS.FF') group by dest_rse_id, state".format(schema=schema)
        result = session.execute(sql).fetchall()
        for rse, state, num in result:
            # print 'requests.24Hours_old.%s.%s %s' % (state, rse, num)
            (probe_metrics.gauge(name='{scope}.requests.24Hours_old.{state}.{rse}')
                          .labels(scope=scope, state=state, rse=rse).set(num))

        # check left requests which are 48 hours old to different sites
        timeLimit = datetime.datetime.utcnow() - datetime.timedelta(hours=48)
        sql = "select /*+ index_ffs(REQUESTS REQUESTS_TYP_STA_CRE_IDX) */ {schema}id2rse(dest_rse_id) rse, state, count(*) from {schema}requests \
               where request_type='T' and created_at<=to_timestamp('".format(schema=schema) + str(timeLimit) \
              + "','YYYY-MM-dd HH24:MI:SS.FF') group by dest_rse_id, state".format(schema=schema)
        result = session.execute(sql).fetchall()
        for rse, state, num in result:
            # print 'requests.48Hours_old.%s.%s %s' % (state, rse, num)
            (probe_metrics.gauge(name='{scope}.requests.48Hours_old.{state}.{rse}')
                          .labels(scope=scope, state=state, rse=rse).set(num))

    except:
        sys.exit(UNKNOWN)
    finally:
        session.remove()
    sys.exit(OK)
