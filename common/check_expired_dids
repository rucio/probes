#!/usr/bin/env python3
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Vincent Garonne, <vincent.garonne@cern.ch>, 2013
# - Thomas Beermann, <thomas.beermann@cern.ch>, 2019
# - Eric Vaandering <ewv@fnal.gov>, 2020-2022

"""
Probe to check the backlog of expired dids.
"""
from __future__ import print_function

import sys
import traceback


from datetime import datetime
from rucio.core import monitor

from prometheus_client import CollectorRegistry, Gauge, push_to_gateway
from rucio.common.config import config_get

from rucio.db.sqla import models
from rucio.db.sqla.session import get_session
from rucio.db.sqla.util import get_count


PrometheusPusher = common.PrometheusPusher

from utils.common import probe_metrics


# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if __name__ == "__main__":
    try:
        registry = CollectorRegistry()
        session = get_session()
        with PrometheusPusher(registry, job_name='check_expired_dids') as prometheus_config:
            prefix: str = prometheus_config['prefix']
            query = (session.query(models.DataIdentifier.scope)
                           .filter(models.DataIdentifier.expired_at.isnot(None),
                                   models.DataIdentifier.expired_at < datetime.utcnow()))
            result = get_count(query)
            # Possible check against a threshold. If result > max_value then sys.exit(CRITICAL)

            monitor.record_gauge('undertaker.expired_dids', value=result)
            Gauge(prefix + 'undertaker_expired_dids', '', registry=registry).set(result)

            print(result)

    except:
        print(traceback.format_exc())
        sys.exit(UNKNOWN)
    sys.exit(OK)
