#!/usr/bin/env python3
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Vincent Garonne, <vincent.garonne@cern.ch>, 2013
# - Thomas Beermann, <thomas.beermann@cern.ch>, 2019
# - Eric Vaandering, <ewv@fnal.gov>, 2022

"""
Probe to check the backlog of unlocked replicas.
"""

import sys

from prometheus_client import CollectorRegistry, Gauge
from rucio.core import monitor
from rucio.db.sqla.session import BASE, get_session

from utils import common

PrometheusPusher = common.PrometheusPusher


# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

# select (select rse from "ATLAS_RUCIO".rses where id = rse_id),
#       n
# from
# (SELECT /*+ index_FFS(replicas REPLICAS_TOMBSTONE_IDX) */
#      CASE WHEN ("ATLAS_RUCIO".replicas.tombstone IS NOT NULL) THEN "ATLAS_RUCIO".replicas.rse_id END as rse_id,
#      count(*) as n
# FROM "ATLAS_RUCIO".replicas
# WHERE "ATLAS_RUCIO".replicas.tombstone is not null
# GROUP BY CASE WHEN ("ATLAS_RUCIO".replicas.tombstone IS NOT NULL) THEN "ATLAS_RUCIO".replicas.rse_id END)

if BASE.metadata.schema:
    schema = BASE.metadata.schema + '.'
else:
    schema = ''

if __name__ == "__main__":
    try:
        registry = CollectorRegistry()
        session = get_session()
        with PrometheusPusher(registry, job_name='check_unevaluated_dids') as prometheus_config:
            prefix: str = prometheus_config['prefix']

            unlocked_sql = 'select  /*+ index_ffs(replicas REPLICAS_TOMBSTONE_IDX) */  count(1) from {schema}replicas where tombstone is not null'.format(schema=schema)
            result = session.execute(unlocked_sql).fetchone()[0]
            monitor.record_gauge(stat='reaper.unlocked_replicas', value=result)
            Gauge(prefix + 'reaper_unlocked_replicas', '', registry=registry).set(result)
            print(result)
            expired_sql = 'select  /*+ index_ffs(replicas REPLICAS_TOMBSTONE_IDX) */  count(1) from {schema}replicas where tombstone is not null and tombstone < sysdate - 2/24'.format(schema=schema)
            result = session.execute(expired_sql).fetchone()[0]
            monitor.record_gauge(stat='reaper.expired_replicas', value=result)
            Gauge(prefix + 'reaper_expired_replicas', '', registry=registry).set(result)


    except:
        sys.exit(UNKNOWN)
    sys.exit(OK)
