#!/usr/bin/env python3
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Vincent Garonne, <vincent.garonne@cern.ch>, 2013
# - Thomas Beermann, <thomas.beermann@cern.ch>, 2019
# - Eric Vaandering, <ewv@fnal.gov>, 2022
# - Maggie Voetberg, <maggiev@fnal.gov>, 2024

"""
Probe to check the backlog of unlocked replicas.
"""

import sys
from sqlalchemy.sql import text as sql_text

from rucio.db.sqla.session import BASE, get_session
from utils.common import PrometheusPusher

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if BASE.metadata.schema:
    schema = BASE.metadata.schema + '.'
else:
    schema = ''

if __name__ == "__main__":
    try:
        session = get_session()

        expired_sql = 'select  /*+ index_ffs(replicas REPLICAS_TOMBSTONE_IDX) */  count(1) from {schema}replicas where tombstone is not null and tombstone < sysdate - 2/24'.format(schema=schema)
        unlocked_sql = 'select  /*+ index_ffs(replicas REPLICAS_TOMBSTONE_IDX) */  count(1) from {schema}replicas where tombstone is not null'.format(schema=schema)
        queries = {
            "expired": expired_sql,
            "unlocked": unlocked_sql
        }

        with PrometheusPusher() as manager:
            for replica_status, query in queries.items(): 
                result = session.execute(sql_text(query)).fetchone()[0]
                manager.gauge("unlocked_replicas.{replica_status}").labels(did_status=replica_status).set(result)

    except:
        sys.exit(UNKNOWN)
    sys.exit(OK)
