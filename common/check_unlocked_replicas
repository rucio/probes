#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) since 2012
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Probe to check the backlog of unlocked replicas.
"""
from __future__ import print_function

import sys

from prometheus_client import CollectorRegistry, Gauge, push_to_gateway
from rucio.common.config import config_get
from rucio.db.sqla.session import BASE, get_session

from utils.common import probe_metrics

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

# select (select rse from "ATLAS_RUCIO".rses where id = rse_id),
#       n
# from
# (SELECT /*+ index_FFS(replicas REPLICAS_TOMBSTONE_IDX) */
#      CASE WHEN ("ATLAS_RUCIO".replicas.tombstone IS NOT NULL) THEN "ATLAS_RUCIO".replicas.rse_id END as rse_id,
#      count(*) as n
# FROM "ATLAS_RUCIO".replicas
# WHERE "ATLAS_RUCIO".replicas.tombstone is not null
# GROUP BY CASE WHEN ("ATLAS_RUCIO".replicas.tombstone IS NOT NULL) THEN "ATLAS_RUCIO".replicas.rse_id END)

if BASE.metadata.schema:
    schema = BASE.metadata.schema + '.'
else:
    schema = ''

PROM_SERVERS = config_get('monitor', 'prometheus_servers', raise_exception=False, default='')
if PROM_SERVERS != '':
    PROM_SERVERS = PROM_SERVERS.split(',')

if __name__ == "__main__":
    try:
        registry = CollectorRegistry()
        session = get_session()
        unlocked_sql = 'select  /*+ index_ffs(replicas REPLICAS_TOMBSTONE_IDX) */  count(1) from {schema}replicas where tombstone is not null'.format(schema=schema)
        result = session.execute(unlocked_sql).fetchone()[0]
        probe_metrics.gauge(name='reaper.unlocked_replicas').set(result)
        Gauge('reaper_unlocked_replicas', '', registry=registry).set(result)
        print(result)
        expired_sql = 'select  /*+ index_ffs(replicas REPLICAS_TOMBSTONE_IDX) */  count(1) from {schema}replicas where tombstone is not null and tombstone < sysdate - 2/24'.format(schema=schema)
        result = session.execute(expired_sql).fetchone()[0]
        probe_metrics.gauge(name='reaper.unlocked_replicas').set(result)
        Gauge('reaper_expired_replicas', '', registry=registry).set(result)

        if len(PROM_SERVERS):
            for server in PROM_SERVERS:
                try:
                    push_to_gateway(server.strip(), job='check_unlocked_replicas', registry=registry)
                except:
                    continue
    except:
        sys.exit(UNKNOWN)
    sys.exit(OK)
