#!/usr/bin/env python
# Copyright European Organization for Nuclear Research (CERN) since 2012
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


"""
Probe to check Oracle.
"""
from __future__ import print_function

import re
import sys

import cx_Oracle
from rucio.common.config import config_get

from utils.common import probe_metrics

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if __name__ == "__main__":

    try:
        sql_connection = config_get('database', 'default')
        user = config_get('database', 'powuseraccount', raise_exception=False, default=None)
        password = config_get('database', 'powuserpassword', raise_exception=False, default=None)
    except:
        print('Cannot get DB parameters')
        sys.exit(CRITICAL)

    if not (user and password):
        try:
            upp = sql_connection.split('@')[0]  # scheme://user:password
            up = upp.split('://')[1]  # user:password
            user, password = up.split(':')
        except:
            print('Cannot guess DB parameters')
            sys.exit(CRITICAL)

    dsn = sql_connection.split('@')[1]
    connection = cx_Oracle.connect(user, password, dsn)
    cursor = connection.cursor()
    try:
        query = '''SELECT mname.metric_name, round(VALUE)
FROM
gv$sysmetric sysm,
v$metricname mname
WHERE
mname.metric_id IN (2004, 2006, 2030, 2145, 2058, 2147, 2000, 2016, 2143, 4000, 2024, 2025)
AND mname.group_id = 2
AND inst_id = 2
AND mname.metric_id = sysm.metric_id
AND mname.group_id = sysm.group_id
ORDER BY inst_id, mname.metric_name, mname.metric_unit'''
        cursor.execute(query)
        for (metric, value) in cursor:
            safe_metric = metric.replace(' ', '_')  # Convert space to underscore
            safe_metric = re.sub(r'\W+', '', safe_metric)  # Remove any other odd characters
            m = 'oracle.%s' % safe_metric
            print(m, value, ' ')
            probe_metrics.gauge(name=m).set(value)
    except:
        sys.exit(UNKNOWN)
    finally:
        cursor.close()
        connection.close()
    sys.exit(OK)
