#!/usr/bin/env python3
# Copyright European Organization for Nuclear Research (CERN) 2013
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
#
# Authors:
# - Vincent Garonne, <vincent.garonne@cern.ch>, 2013
# - Thomas Beermann, <thomas.beermann@cern.ch>, 2019
# - Eric Vaandering <ewv@fnal.gov>, 2020-2022

"""
Probe to check the backlog of new dids.
"""

import sys
import traceback


from prometheus_client import CollectorRegistry, Gauge
from rucio.core import monitor

from rucio.db.sqla import models
from rucio.db.sqla.session import get_session
from rucio.db.sqla.util import get_count


from utils import common

PrometheusPusher = common.PrometheusPusher


# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if __name__ == "__main__":
    try:
        registry = CollectorRegistry()
        session = get_session()
        with PrometheusPusher(registry, job_name='check_new_dids') as prometheus_config:
            prefix: str = prometheus_config['prefix']
            query = (session.query(models.DataIdentifier.scope)
                            .with_hint(models.DataIdentifier, "INDEX_FFS(DIDS DIDS_IS_NEW_IDX)", 'oracle')
                            .filter(models.DataIdentifier.is_new.isnot(None)))
            result = get_count(query)
            monitor.record_gauge('transmogrifier.new_dids', value=result)
            Gauge(prefix + 'transmogrifier_new_dids', '', registry=registry).set(result)


        print(result)
    except:
        print(traceback.format_exc())
        sys.exit(UNKNOWN)
    sys.exit(OK)
