#!/usr/bin/env python3
# Copyright 2012-2024 CERN
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors:
# - Christos Emmanouil, <christos.emmanouil@cern.ch>, 2024

"""
Probe to check number and volume of requests per rses, account, activity and state.
"""

import sys
import traceback

from sqlalchemy import func
from sqlalchemy.orm import aliased

from rucio.db.sqla import models
from rucio.db.sqla.session import get_session
from rucio.common.types import InternalScope

from utils import common
PrometheusPusher = common.PrometheusPusher

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if __name__ == "__main__":

    try:
        
        session = get_session()
        
        DestRSE = aliased(models.RSE)
        SourceRSE = aliased(models.RSE)

        requests_query = (
            session.query(
                SourceRSE.rse.label("source_rse"),
                DestRSE.rse.label("dest_rse"),
                models.Request.account,
                models.Request.activity,
                models.Request.state,
                models.Request.external_host,
                func.count(func.distinct(models.Request.id)),
                func.sum(models.Request.bytes)
            )
            .with_hint(DestRSE, "INDEX_FFS(rses RSES_PK)", "oracle")
            .with_hint(SourceRSE, "INDEX_FFS(rses RSES_PK)", "oracle")
            .with_hint(models.Request, 'INDEX_FFS(requests REQUESTS_PK)', 'oracle')
            .with_hint(models.Request, 'INDEX_FFS(requests REQUESTS_RULEID_IDX)', 'oracle')
            .with_hint(models.Request, 'INDEX_FFS(requests REQUESTS_DEST_RSE_ID_IDX)', 'oracle')
            .with_hint(models.Request, 'INDEX_FFS(requests REQUESTS_TYP_STA_UPD_IDX)', 'oracle')
            .select_from(models.Request)
            .filter(models.Request.scope == InternalScope("cms"))
            .join(DestRSE, models.Request.dest_rse_id == DestRSE.id)
            .join(SourceRSE, models.Request.source_rse_id == SourceRSE.id)
            .group_by(
                SourceRSE.rse,
                DestRSE.rse,
                models.Request.account,
                models.Request.activity,
                models.Request.state,
                models.Request.external_host
            )
        )
        
        with PrometheusPusher() as manager:
            for (
                source_rse, dest_rse, account, activity, 
                requests_state, external_host, requests_count, requests_volume
                ) in requests_query.all():
                
                # print(
                #     f"Source:{source_rse},\tDestination:{dest_rse},"
                #     f"\tAccount:{account},\tActivity:{activity},"
                #     f"\tRequestsState:{requests_state.name},\tExternalHost:{external_host},"
                #     f"\tRequestsCount:{requests_count},\tRequestsVolume:{requests_volume},"
                # )
                
                metrics = {
                    "requests_count": requests_count,
                    "requests_volume": requests_volume, 
                }
                
                for metric, value in metrics.items():
                
                    manager.gauge(
                        name = (
                            f"{metric}"
                            ".{source_rse}.{dest_rse}.{account}.{activity}"
                            ".{requests_state}.{external_host}"
                        ),
                        documentation = (
                            f"{metric} per:"
                            "source rse, destination rse, account, activity,"
                            " requests state and external host"
                        )
                    ).labels(
                        source_rse = source_rse,
                        dest_rse = dest_rse,
                        account = account,
                        activity = activity, 
                        requests_state = requests_state.name
                        external_host = external_host
                    ).set(value)
                    
    except:
        print(traceback.format_exc())
        sys.exit(UNKNOWN)
    finally:
        session.remove()
    sys.exit(OK)