#!/usr/bin/env python3
# Copyright European Organization for Nuclear Research (CERN) since 2012
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Probe that counts the number of stuck, replicating rules and waiting for approval rules, clasiffied by account.
"""

import sys
import traceback

from rucio.common.types import InternalAccount
from rucio.db.sqla import models
from rucio.db.sqla.constants import RuleState
from rucio.db.sqla.session import get_session
from sqlalchemy import func

from utils import common

PrometheusPusher = common.PrometheusPusher

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3
states = {
    "stuck": RuleState.STUCK, 
    "replicating": RuleState.REPLICATING, 
    "waiting_approval": RuleState.WAITING_APPROVAL
} 
accounts = [
    'transfer_ops', 
    'wmcore_output', 
    'wma_prod', 
    'wmcore_transferor', 
    'crab_tape_recall'
]

if __name__ == '__main__':

    try:
        session = get_session()

        with PrometheusPusher() as manager: 
            for account_name in accounts:
                for state_name, state in states.items(): 
                    internal_account = InternalAccount(account_name)
                    query = (session.query(func.count(models.ReplicationRule.scope))
                            .filter(models.ReplicationRule.state == state)
                            .filter(models.ReplicationRule.account == internal_account))

                    rule_count = query.scalar() or 0

                    manager.gauge(
                        name='rule_count_per_state_and_account.{state}.{account}',
                        documentation='Rule count per state and account'
                        ).labels(account=account_name, state=state_name
                                 ).set(rule_count)

    except:
        print(traceback.format_exc())
        sys.exit(UNKNOWN)

