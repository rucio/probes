#!/usr/bin/env python3
# Copyright 2012-2020 CERN
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors:
# - Donata Mielaikaite, <donata.mielaikaite@cern.ch>, 2020
# - Fernando Garzon, <oscar.fernando.garzon.miguez@cern.ch>, 2020

"""
Probe to check the number of expected files per rse.
"""

import json
import sys
import traceback

from prometheus_client import CollectorRegistry, Gauge, push_to_gateway
from sqlalchemy import func
from rucio.db.sqla.constants import RuleState
from rucio.core import monitor
from rucio.db.sqla.constants import RequestType
from rucio.db.sqla import models
from rucio.db.sqla.session import get_session
from rucio.common.config import config_get

PROM_SERVERS = config_get('monitor', 'prometheus_servers', raise_exception=False, default='')
if PROM_SERVERS != '':
    PROM_SERVERS = PROM_SERVERS.split(',')
else:
    PROM_SERVERS = None

prom_labels_config = config_get('monitor', 'prometheus_labels', raise_exception=False, default='{}')
extra_prom_labels = json.loads(prom_labels_config)

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if __name__ == '__main__':
    registry = CollectorRegistry()
    labelnames = ['dst_rse']
    labelnames.extend(extra_prom_labels.keys())
    missing_files_gauge = Gauge('rucio_judge_number_of_missing_files','Number of missing files in a RSE',
                             labelnames=labelnames, registry=registry)
    replicating_files_gauge = Gauge('rucio_judge_number_of_replicating_files', 'Number of files being replicated to a RSE',
                                labelnames=labelnames, registry=registry)
    status = OK

    try:
        session = get_session()
        query = (session.query(models.RSE.rse, func.count(models.Request.id))
                 .with_hint(models.Request, 'index_fss(%(name)s REQUESTS_TYP_STA_CRE_IDX)')
                 .join(models.RSE, (models.Request.dest_rse_id == models.RSE.id))
                 .join(models.ReplicationRule, (models.Request.rule_id == models.ReplicationRule.id))
                 .filter(models.Request.request_type == RequestType.TRANSFER)
                 .filter(models.ReplicationRule.state != RuleState.OK).group_by(models.RSE.rse))
        results = query.all()
        print('Number of missing files per RSE')
        for rse, num in results:
            #print(type(rse), rse, type(num), num)
            prom_labels = {'dst_rse': rse}
            prom_labels.update(extra_prom_labels)
            missing_files_gauge.labels(**prom_labels).set(num)
            monitor.record_gauge(
                name='judge.number_of_missing_files.%s' % rse,
                value=num)
            #print(rse, num)

        query = (session.query(models.RSE.rse, func.count(models.Request.id))
        .with_hint(models.Request, 'index_fss(%(name)s REQUESTS_TYP_STA_CRE_IDX)')
        .join(models.RSE, (models.Request.dest_rse_id == models.RSE.id))
        .join(models.ReplicationRule, (models.Request.rule_id == models.ReplicationRule.id))
        .filter(models.Request.request_type == RequestType.TRANSFER)
        .filter(models.ReplicationRule.state == RuleState.REPLICATING).group_by(models.RSE.rse))
        results = query.all()
        print('Number of replicating files per RSE')
        for rse, num in results:
            prom_labels = {'dst_rse': rse}
            prom_labels.update(extra_prom_labels)
            replicating_files_gauge.labels(**prom_labels).set(num)
            monitor.record_gauge(
                name='judge.number_of_replicating_files.%s' % rse,
                value=num)
        if PROM_SERVERS:
            for server in PROM_SERVERS:
                try:
                    push_to_gateway(server.strip(), job='check_number_of_missing_files', registry=registry)
                except:
                    continue
            #print(rse,num)
    except Exception as error:
        print (traceback.format_exc(), error)
        sys.exit(UNKNOWN)
