#!/usr/bin/env python3
# Copyright 2012-2020 CERN
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Authors:
# - Donata Mielaikaite, <donata.mielaikaite@cern.ch>, 2020
# - Fernando Garzon, <oscar.fernando.garzon.miguez@cern.ch>, 2020
# - Eric Vaandering, <ewv@fnal.gov>, 2021

"""
Probe to check used space.
"""

import sys
import traceback

from prometheus_client import CollectorRegistry, Gauge
from rucio.core.rse import list_rses, get_rse_usage, list_rse_attributes, get_rse_limits
from rucio.db.sqla import models
from rucio.db.sqla.session import get_session

from utils import common

probe_metrics = common.probe_metrics
PrometheusPusher = common.PrometheusPusher

# Exit statuses
OK, WARNING, CRITICAL, UNKNOWN = 0, 1, 2, 3

if __name__ == '__main__':
    registry = CollectorRegistry()
    labelnames = ['rse', 'country', 'rse_type', 'source']

    try:
        session = get_session()
        with PrometheusPusher(registry, job_name='check_report_used_space') as prometheus_config:
            extra_prom_labels = prometheus_config['labels']
            labelnames.extend(extra_prom_labels.keys())

            prefix: str = prometheus_config['prefix']
            used_space_gauge = Gauge(prefix + 'report_used_space', 'Space used at an RSE from various sources',
                                     labelnames=labelnames, registry=registry)

            for rse in list_rses():
                sources = get_rse_usage(rse['id'])
                attributes = list_rse_attributes(rse['id'])
                limits = get_rse_limits(rse['id'])
                country = attributes.get('country', 'UNKNOWN')
                rse_type = session.query(models.RSE.rse_type).filter(models.RSE.id == rse['id']).scalar()
                rse_type = str(rse_type).split('.', 1)[1]

                # export and push `minfreespace` value from RSE limits
                if limits.get('MinFreeSpace'):
                    prom_labels = {'rse': rse['rse'], 'country': country, 'rse_type': rse_type, 'source': 'minfreespace'}
                    prom_labels.update(extra_prom_labels)
                    used_space_gauge.labels(**prom_labels).set(limits.get('MinFreeSpace'))
                    (probe_metrics.gauge(name='judge.used_space_rucio.{rse}.{country}.{rse_type}.minfreespace',
                                         documentation='Space used at an RSE from various sources')
                     .labels(rse=rse['rse'], country=country, rse_type=rse_type, source='minfreespace')
                     .set(limits.get('minfreespace')))
                    print(rse['rse'], country, rse_type, 'minfreespace', limits.get('minfreespace'))
                        
                for usage in sources:
                    source = usage['source']
                    prom_labels = {'rse': rse['rse'], 'country': country, 'rse_type': rse_type, 'source': source}
                    prom_labels.update(extra_prom_labels)
                    used_space_gauge.labels(**prom_labels).set(usage['used'])
                    (probe_metrics.gauge(name='judge.used_space_rucio.{rse}.{country}.{rse_type}.{source}',
                                         documentation='Space used at an RSE from various sources')
                     .labels(rse=rse['rse'], country=country, rse_type=rse_type, source=source)
                     .set(usage['used']))
                    print(rse['rse'], country, rse_type, source, usage['used'])
    except:
        print(traceback.format_exc())
        sys.exit(UNKNOWN)
